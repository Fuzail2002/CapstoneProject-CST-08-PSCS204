from scipy.spatial import distance
from imutils import face_utils
from pygame import mixer
import imutils
import dlib
import cv2
import tkinter as tk
from tkinter import filedialog, messagebox
import time
import os

# Initialize the mixer for alert sounds
mixer.init()
alert_sound_path = "/Users/fuzailsyed/Downloads/music.wav"
mixer.music.load(alert_sound_path)


# Function to calculate Eye Aspect Ratio (EAR)
def eye_aspect_ratio(eye):
    A = distance.euclidean(eye[1], eye[5])
    B = distance.euclidean(eye[2], eye[4])
    C = distance.euclidean(eye[0], eye[3])
    ear = (A + B) / (2.0 * C)
    return ear


# Default settings
thresh = 0.25
frame_check = 20
alert_sound_enabled = True

# Load models
try:
    detect = dlib.get_frontal_face_detector()
    predict = dlib.shape_predictor("/Users/fuzailsyed/Desktop/shape_predictor_68_face_landmarks.dat")
except Exception as e:
    print(f"Error loading models: {e}")
    exit()

# Facial landmark indices for eyes
(lStart, lEnd) = face_utils.FACIAL_LANDMARKS_68_IDXS["left_eye"]
(rStart, rEnd) = face_utils.FACIAL_LANDMARKS_68_IDXS["right_eye"]

# Log file setup
log_file = "drowsiness_log.txt"
if not os.path.exists(log_file):
    open(log_file, "w").close()


# GUI for user settings
def open_settings():
    def save_settings():
        global thresh, frame_check, alert_sound_enabled
        try:
            thresh = float(thresh_entry.get())
            frame_check = int(frame_check_entry.get())
            alert_sound_enabled = sound_var.get()
            settings_window.destroy()
            messagebox.showinfo("Settings", "Settings saved successfully!")
        except ValueError:
            messagebox.showerror("Error", "Invalid input. Please check the values.")

    settings_window = tk.Toplevel(root)
    settings_window.title("Settings")
    settings_window.geometry("300x200")

    tk.Label(settings_window, text="Threshold (EAR)").pack()
    thresh_entry = tk.Entry(settings_window)
    thresh_entry.insert(0, str(thresh))
    thresh_entry.pack()

    tk.Label(settings_window, text="Frame Check Count").pack()
    frame_check_entry = tk.Entry(settings_window)
    frame_check_entry.insert(0, str(frame_check))
    frame_check_entry.pack()

    sound_var = tk.BooleanVar(value=alert_sound_enabled)
    tk.Checkbutton(settings_window, text="Enable Alert Sound", variable=sound_var).pack()

    tk.Button(settings_window, text="Save", command=save_settings).pack()


# Main application loop
def start_monitoring():
    global alert_sound_enabled
    cap = cv2.VideoCapture(0)

    if not cap.isOpened():
        messagebox.showerror("Error", "Camera not detected!")
        return

    flag = 0
    while True:
        ret, frame = cap.read()
        if not ret:
            break

        frame = imutils.resize(frame, width=450)
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        subjects = detect(gray, 0)

        for subject in subjects:
            shape = predict(gray, subject)
            shape = face_utils.shape_to_np(shape)

            leftEye = shape[lStart:lEnd]
            rightEye = shape[rStart:rEnd]
            leftEAR = eye_aspect_ratio(leftEye)
            rightEAR = eye_aspect_ratio(rightEye)
            ear = (leftEAR + rightEAR) / 2.0

            leftEyeHull = cv2.convexHull(leftEye)
            rightEyeHull = cv2.convexHull(rightEye)
            cv2.drawContours(frame, [leftEyeHull], -1, (0, 255, 0), 1)
            cv2.drawContours(frame, [rightEyeHull], -1, (0, 255, 0), 1)

            status_text = "Awake"
            if ear < thresh:
                flag += 1
                status_text = f"Drowsy ({flag}/{frame_check})"
                if flag >= frame_check:
                    cv2.putText(frame, "ALERT! DROWSINESS DETECTED", (10, 30),
                                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
                    if alert_sound_enabled and not mixer.music.get_busy():
                        mixer.music.play()
                    with open(log_file, "a") as log:
                        log.write(f"Drowsiness detected at {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
            else:
                flag = 0
                status_text = "Awake"

            # Display current EAR and status
            cv2.putText(frame, f"EAR: {ear:.2f}", (300, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
            cv2.putText(frame, f"Status: {status_text}", (10, 400), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 0), 2)

        cv2.imshow("Drowsiness Detection", frame)
        key = cv2.waitKey(1) & 0xFF
        if key == ord("q"):
            break

    cap.release()
    cv2.destroyAllWindows()


# Main GUI setup
root = tk.Tk()
root.title("Driver Drowsiness Detection")
root.geometry("300x150")

tk.Label(root, text="Driver Drowsiness Detection", font=("Helvetica", 14)).pack(pady=10)
tk.Button(root, text="Start Monitoring", command=start_monitoring).pack(pady=5)
tk.Button(root, text="Settings", command=open_settings).pack(pady=5)
tk.Button(root, text="Exit", command=root.destroy).pack(pady=5)

root.mainloop()
