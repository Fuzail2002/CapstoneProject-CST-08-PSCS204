from scipy.spatial import distance
from imutils import face_utils
from pygame import mixer
import imutils
import dlib
import cv2
import tkinter as tk
from tkinter import messagebox
import time
import random

# Initialize the mixer for alert sounds
mixer.init()
alert_sound_path = '/Users/fuzailsyed/Desktop/Driver Drowsiness Detection_music.wav' 
mixer.music.load(alert_sound_path)

# Function to calculate Eye Aspect Ratio (EAR)
def eye_aspect_ratio(eye):
    A = distance.euclidean(eye[1], eye[5])
    B = distance.euclidean(eye[2], eye[4])
    C = distance.euclidean(eye[0], eye[3])
    return (A + B) / (2.0 * C)

# Function to calculate Mouth Aspect Ratio (MAR)
def mouth_aspect_ratio(mouth):
    A = distance.euclidean(mouth[2], mouth[10])  # Vertical distance
    B = distance.euclidean(mouth[4], mouth[8])  # Vertical distance
    C = distance.euclidean(mouth[0], mouth[6])  # Horizontal distance
    return (A + B) / (2.0 * C)

# Default settings
thresh_ear = 0.25  # EAR threshold
thresh_mar = 0.7   # MAR threshold
frame_check = 30   # Frames for drowsiness detection
yawn_check = 15    # Frames for yawn detection
alert_sound_enabled = True

# Load models
try:
    detect = dlib.get_frontal_face_detector()
    predict = dlib.shape_predictor("/Users/fuzailsyed/Desktop/shape_predictor_68_face_landmarks.dat")
except Exception as e:
    print(f"Error loading models: {e}")
    exit()

# Facial landmark indices
(lStart, lEnd) = face_utils.FACIAL_LANDMARKS_68_IDXS["left_eye"]
(rStart, rEnd) = face_utils.FACIAL_LANDMARKS_68_IDXS["right_eye"]
(mStart, mEnd) = face_utils.FACIAL_LANDMARKS_68_IDXS["mouth"]

# Simulated car speed (for demonstration purposes)
def get_car_speed():
    """Simulates the current speed of the car."""
    return random.randint(30, 120)

# Main application loop
def start_monitoring():
    global alert_sound_enabled
    cap = cv2.VideoCapture(0)

    if not cap.isOpened():
        messagebox.showerror("Error", "Camera not detected!")
        return

    drowsy_flag = 0
    yawn_flag = 0
    alarm_active = False
    scenario_text = "Normal"
    alert_timer = 0

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        frame = imutils.resize(frame, width=450)
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        subjects = detect(gray, 0)

        car_speed = get_car_speed()  # Simulate real-time speed
        cv2.putText(frame, f"Speed: {car_speed} km/h", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)

        for subject in subjects:
            shape = predict(gray, subject)
            shape = face_utils.shape_to_np(shape)

            # EAR calculation
            leftEye = shape[lStart:lEnd]
            rightEye = shape[rStart:rEnd]
            leftEAR = eye_aspect_ratio(leftEye)
            rightEAR = eye_aspect_ratio(rightEye)
            ear = (leftEAR + rightEAR) / 2.0

            # MAR calculation
            mouth = shape[mStart:mEnd]
            mar = mouth_aspect_ratio(mouth)

            # Detect drowsiness
            if ear < thresh_ear:
                drowsy_flag += 1
            else:
                drowsy_flag = 0

            # Detect yawning
            if mar > thresh_mar:
                yawn_flag += 1
            else:
                yawn_flag = 0

            # Determine alert timing based on car speed
            if car_speed > 100:
                alert_timer = 0  # Instant warning
            elif 50 <= car_speed <= 90:
                alert_timer = 2  # 2-second delay
            else:
                alert_timer = 4  # 4-5 second delay

            # Trigger alerts
            if (drowsy_flag >= frame_check or yawn_flag >= yawn_check):
                if not alarm_active:
                    time.sleep(alert_timer)  # Delay the alarm based on speed
                    if alert_sound_enabled:
                        mixer.music.play(-1)
                    alarm_active = True
                scenario_text = "Alert! Drowsiness or Yawning Detected"
            else:
                if alarm_active:
                    mixer.music.stop()
                    alarm_active = False
                scenario_text = "Driver Alert"

            # Display EAR, MAR, and scenario
            cv2.putText(frame, f"EAR: {ear:.2f}", (300, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
            cv2.putText(frame, f"MAR: {mar:.2f}", (300, 50), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
            cv2.putText(frame, f"Scenario: {scenario_text}", (10, 90), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)

        cv2.imshow("Drowsiness and Yawn Detection", frame)
        key = cv2.waitKey(1) & 0xFF
        if key == ord("q"):
            break

    cap.release()
    cv2.destroyAllWindows()

# GUI setup
root = tk.Tk()
root.title("Driver Drowsiness and Yawn Detection")
root.geometry("300x150")

tk.Label(root, text="Driver Drowsiness Detection", font=("Helvetica", 14)).pack(pady=10)
tk.Button(root, text="Start Monitoring", command=start_monitoring).pack(pady=5)
tk.Button(root, text="Exit", command=root.destroy).pack(pady=5)
root.mainloop()
